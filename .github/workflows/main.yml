name: Generate and Publish LineageOS Build Script

on:
  workflow_dispatch:
    inputs:
      android_version:
        description: "Enter the Android version (e.g., 21.0 for LineageOS 21)"
        required: true
        default: "21.0"
      device_codename:
        description: "Enter the device codename (e.g., a22x)"
        required: true
      device_tree:
        description: "Device tree repository URL"
        required: true
      vendor_tree:
        description: "Vendor repository URL"
        required: true
      kernel_tree:
        description: "Kernel repository URL"
        required: true
      release_tag:
        description: "Release tag (e.g., v1.0)"
        required: true
        default: "v1.0"
      release_name:
        description: "Release name (e.g., LineageOS Build Script)"
        required: true
        default: "LineageOS Build Script"

jobs:
  generate-and-publish:
    runs-on: ubuntu-latest  # Use Ubuntu latest version

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Generate Build Script
      run: |
        echo "#!/bin/bash" > build_lineage.sh
        echo "set -e" >> build_lineage.sh
        echo "ANDROID_VERSION=\"${{ github.event.inputs.android_version }}\"" >> build_lineage.sh
        echo "DEVICE=\"${{ github.event.inputs.device_codename }}\"" >> build_lineage.sh
        echo "THREADS=\$(nproc)" >> build_lineage.sh
        echo "WORK_DIR=\"\$HOME/lineageos\"" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "install_dependencies_linux() {" >> build_lineage.sh
        echo "    sudo apt update && sudo apt upgrade -y" >> build_lineage.sh
        echo "    sudo apt install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf \\" >> build_lineage.sh
        echo "        imagemagick libncurses5 libssl-dev libxml2 libxml2-utils lzop openjdk-17-jdk python3 python3-pip \\" >> build_lineage.sh
        echo "        python3-venv repo rsync unzip xz-utils zip zlib1g-dev" >> build_lineage.sh
        echo "}" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "install_dependencies_termux() {" >> build_lineage.sh
        echo "    pkg update && pkg upgrade -y" >> build_lineage.sh
        echo "    pkg install -y bc bison clang ccache curl flex git gnupg gperf imagemagick libandroid-support libxml2 \\" >> build_lineage.sh
        echo "        lzop openjdk-17 python python-pip rsync tar unzip wget zip zlib" >> build_lineage.sh
        echo "}" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "if [ -d \"\$PREFIX/bin\" ] && [ \"\$(uname -o)\" == \"Android\" ]; then" >> build_lineage.sh
        echo "    install_dependencies_termux" >> build_lineage.sh
        echo "else" >> build_lineage.sh
        echo "    install_dependencies_linux" >> build_lineage.sh
        echo "fi" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "if [ ! -f \"\$HOME/bin/repo\" ]; then" >> build_lineage.sh
        echo "    mkdir -p ~/bin" >> build_lineage.sh
        echo "    curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo" >> build_lineage.sh
        echo "    chmod a+x ~/bin/repo" >> build_lineage.sh
        echo "    export PATH=~/bin:\$PATH" >> build_lineage.sh
        echo "fi" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "mkdir -p \"\$WORK_DIR\"" >> build_lineage.sh
        echo "cd \"\$WORK_DIR\"" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "repo init -u https://github.com/LineageOS/android.git -b lineage-\$ANDROID_VERSION" >> build_lineage.sh
        echo "repo sync -j\$THREADS --force-sync" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "git clone --depth=1 ${{ github.event.inputs.device_tree }} device/samsung/\$DEVICE" >> build_lineage.sh
        echo "git clone --depth=1 ${{ github.event.inputs.kernel_tree }} kernel/samsung/\$DEVICE" >> build_lineage.sh
        echo "git clone --depth=1 ${{ github.event.inputs.vendor_tree }} vendor/samsung/\$DEVICE" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "source build/envsetup.sh" >> build_lineage.sh
        echo "lunch lineage_\$DEVICE-userdebug" >> build_lineage.sh
        echo "mka bacon -j\$THREADS" >> build_lineage.sh
        echo "" >> build_lineage.sh
        echo "echo \"Build completed. Output directory: \$WORK_DIR/out/target/product/\$DEVICE/\"" >> build_lineage.sh
        chmod +x build_lineage.sh

    - name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_tag }}
        release_name: ${{ github.event.inputs.release_name }}
        draft: false
        prerelease: false
        owner: ${{ github.repository_owner }}
        repo: ${{ github.repository }}

    - name: Upload Build Script to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./build_lineage.sh
        asset_name: build_lineage.sh
        asset_content_type: application/x-shellscript
